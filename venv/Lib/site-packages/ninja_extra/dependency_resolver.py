<<<<<<< HEAD
<<<<<<< HEAD
from typing import List, Optional, Tuple, Type, TypeVar, Union, cast
=======
import typing as t
>>>>>>> ecbd90b (Initial commit)
=======
from typing import List, Optional, Tuple, Type, TypeVar, Union, cast
>>>>>>> 903c694 (inital commit)

from django.apps import apps
from django.core.exceptions import ImproperlyConfigured
from injector import Injector, Module

from ninja_extra.apps import NinjaExtraConfig
from ninja_extra.shortcuts import fail_silently

__all__ = ["service_resolver", "get_injector", "register_injector_modules"]

<<<<<<< HEAD
<<<<<<< HEAD
T = TypeVar("T")


def get_injector() -> Injector:
    app = cast(
        Optional[NinjaExtraConfig],
=======
T = t.TypeVar("T")


def get_injector() -> Injector:
    app = t.cast(
        t.Optional[NinjaExtraConfig],
>>>>>>> ecbd90b (Initial commit)
=======
T = TypeVar("T")


def get_injector() -> Injector:
    app = cast(
        Optional[NinjaExtraConfig],
>>>>>>> 903c694 (inital commit)
        fail_silently(apps.get_app_config, NinjaExtraConfig.name),
    )
    if not app:
        raise ImproperlyConfigured(
            "ninja_extra app is not installed. Did you forget register `ninja_extra` in `INSTALLED_APPS`"
        )
    injector = app.injector
    return injector


<<<<<<< HEAD
<<<<<<< HEAD
def service_resolver(*interfaces: Type[T]) -> Union[Tuple[T, ...], T]:
=======
def service_resolver(*interfaces: t.Type[T]) -> t.Union[t.Tuple[T, ...], T]:
>>>>>>> ecbd90b (Initial commit)
=======
def service_resolver(*interfaces: Type[T]) -> Union[Tuple[T, ...], T]:
>>>>>>> 903c694 (inital commit)
    assert interfaces, "Service can not be empty"

    injector = get_injector()

    if len(interfaces) > 1:
<<<<<<< HEAD
<<<<<<< HEAD
        services_resolved: List[T] = []
=======
        services_resolved: t.List[T] = []
>>>>>>> ecbd90b (Initial commit)
=======
        services_resolved: List[T] = []
>>>>>>> 903c694 (inital commit)
        for service in interfaces:
            services_resolved.append(injector.get(service))
        return tuple(services_resolved)
    return injector.get(interfaces[0])


<<<<<<< HEAD
<<<<<<< HEAD
def register_injector_modules(*modules: Union[Module, Type[Module]]) -> None:
=======
def register_injector_modules(*modules: t.Union[Module, t.Type[Module]]) -> None:
>>>>>>> ecbd90b (Initial commit)
=======
def register_injector_modules(*modules: Union[Module, Type[Module]]) -> None:
>>>>>>> 903c694 (inital commit)
    for module in modules:
        injector = get_injector()
        if isinstance(module, type) and issubclass(module, Module):
            module = module()
        injector.binder.install(module)
