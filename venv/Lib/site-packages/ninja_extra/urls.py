from urllib import parse

from django.utils.encoding import force_str


def replace_query_param(url: str, key: str, val: int) -> str:
    """
    Given a URL and a key/val pair, set or replace an item in the query
    parameters of the URL, and return the new URL.
    """
    (scheme, netloc, path, query, fragment) = parse.urlsplit(force_str(url))
    query_dict = parse.parse_qs(query, keep_blank_values=True)
    query_dict[force_str(key)] = [force_str("{}".format(val))]
<<<<<<< HEAD
<<<<<<< HEAD
    query = parse.urlencode(sorted(list(query_dict.items())), doseq=True)
=======
    query = parse.urlencode(sorted(query_dict.items()), doseq=True)
>>>>>>> ecbd90b (Initial commit)
=======
    query = parse.urlencode(sorted(list(query_dict.items())), doseq=True)
>>>>>>> 903c694 (inital commit)
    return parse.urlunsplit((scheme, netloc, path, query, fragment))


def remove_query_param(url: str, key: str) -> str:
    """
    Given a URL and a key/val pair, remove an item in the query
    parameters of the URL, and return the new URL.
    """
    (scheme, netloc, path, query, fragment) = parse.urlsplit(force_str(url))
    query_dict = parse.parse_qs(query, keep_blank_values=True)
    query_dict.pop(key, None)
<<<<<<< HEAD
<<<<<<< HEAD
    query = parse.urlencode(sorted(list(query_dict.items())), doseq=True)
=======
    query = parse.urlencode(sorted(query_dict.items()), doseq=True)
>>>>>>> ecbd90b (Initial commit)
=======
    query = parse.urlencode(sorted(list(query_dict.items())), doseq=True)
>>>>>>> 903c694 (inital commit)
    return parse.urlunsplit((scheme, netloc, path, query, fragment))
